:where(html) {
  --font-size: 1.333rem;
  --shout: uppercase;
  --set-solid: 1;

  --black: 10, 10, 10;
  --brown: lch(72, 35, 64);
  --yellow: lch(81, 75, 36);
  --bg-idle: rgb(249, 244, 239);
  --bg-active: var(--yellow);

  --hit-gap: var(--gap-1) var(--gap-3) !important;
  --hit-area-height: max(44px, 2em);
  --hit-area-width: 10ch;

  --border-radius: 0.05rem;
  --border-width: 2px;
  --border-shadow-color: currentColor;
  --border-idle: 0 0 0 var(--border-width) var(--border-shadow-color);
  --border-hover: 0 0 0 var(--border-width) var(--bg-active);

  --spread-factor: 1.2;
  --border-focus-spread: 0 0 0 calc(var(--border-width) * var(--spread-factor));
  --border-focus: var(--border-focus-spread) var(--bg-active);

  --alpha-1: 0.12;
  --alpha-2: 0.6;
  --alpha-3: 0.8;

  --disabled-opacity: var(--alpha-2);
  --disabled-color: rgba(var(--black), var(--disabled-opacity));

  --ratio-square: 1;
  --ratio-portrait: 9/16;
  --ratio-landscape: 16/9;
  --ratio-ultrawide: 18/5;

  --gap-1: 0.4em;
  --gap-2: 0.6em;
  --gap-3: 0.8em;
  --gap-4: 1em;
  --gap-5: 1.2em;

  --z-1: 1;
  --z-2: 2;
  --z-3: 3;
  --z-max: 999;

  --zero: 0 !important;
  --none: none !important;
  --transparent: transparent !important;
}

*,
:after,
:before {
  box-sizing: border-box;
  color: currentColor;
}
* {
  margin: 0;
  padding: 0;
  scroll-behavior: smooth;
}

html {
  -ms-overflow-style: -ms-autohiding-scrollbar;
  -webkit-overflow-scrolling: touch;
  -webkit-tap-highlight-color: transparent;
  -webkit-text-size-adjust: 100%;
  text-size-adjust: 100%;
  overflow-y: scroll;
}
@supports (scrollbar-gutter: stable) {
  html {
    overflow-y: auto;
    scrollbar-gutter: stable;
  }
}

html {
  -webkit-text-size-adjust: 100%;
  text-size-adjust: 100%;
  /* 1rem = 10px   
    font-size: 62.5%; */
}

body {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: transparent;
  font-synthesis: none;
  text-size-adjust: 100%;
  font-family: system-ui, sans-serif;
  font-weight: normal;
  line-height: 1.4;
  font-size: var(--font-size);
  color: rgb(var(--black));
  /* fight me */
  width: 100%;
  height: 100%;
  block-size: 100%;
  inline-size: 100%;
}

:is(h1, h2, h3) {
  word-wrap: break-word;
  text-wrap: balance;
}

:is(h1, h2, h3):not(.list-item *) {
  line-height: var(--set-solid);
}

:is(p) {
  font-size: var(--font-size);
  /* no orphans */
  text-wrap: pretty;
}

h1:has(span, b),
p:has(span, b) {
  font-size: inherit;
}

a {
  hyphens: none;
  text-decoration: underline;
  text-decoration-skip-ink: auto;
  text-decoration-thickness: 0.1em;
  text-underline-offset: 0.09em;
  outline: none;
}

a:is(:visited, :hover) {
  /* testing */
  touch-action: manipulation;
}

/* mark external links */
a[target='_blank']:after {
  content: 'external link';
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
  position: absolute !important;
  white-space: nowrap !important;
}

:is(a, button) {
  /* hot take */
  cursor: pointer;
  & svg {
    pointer-events: none;
  }
}

:is(
    button,
    input[type='search'],
    input[type='text'],
    input[type='password'],
    input[type='date'],
    input[type='radio'],
    input[type='checkbox'],
    textarea,
    select
  ) {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  font: inherit;
  font-family: inherit;
  font-size: inherit;
  border-style: solid;
  border: none;
  padding: 0;
  color: currentColor;
  cursor: pointer;
  background-color: var(--bg-idle);
  /* Not removed via appearance */
  margin: 0;
}

:is(
    button,
    input[type='search'],
    input[type='text'],
    input[type='password'],
    input[type='date'],
    input[type='radio'],
    input[type='checkbox'],
    textarea,
    .link
  ) {
  border-radius: var(--border-radius);
  box-shadow: var(--border-idle);
  padding: var(--hit-gap);
  transition:
    180ms box-shadow ease-in-out,
    300ms background-color ease-out;

  &:hover {
    outline: var(--transparent-outline);
    box-shadow: var(--border-hover);
  }
  &:focus {
    outline: var(--transparent-outline);
    box-shadow: var(--border-focus);
  }
  &:focus-visible {
    outline: var(--transparent-outline);
    box-shadow: var(--border-focus);
  }
  /* 
    Mouse only
    .element:focus:not(:focus-visible) {
        outline: none;
    } 
*/
}

:is(input[type='search'], input[type='password'], input[type='text']) {
  font-size: max(16px, 1em);
}

:is(input[type='radio'], input[type='checkbox']) {
  padding: var(--zero);
  width: calc(var(--hit-area-width) / 3);
  height: calc(var(--hit-area-width) / 3);
}

input[type='radio'] {
  border-radius: 50% !important;
}

input[type='password'] {
  font-family: Verdana;
  letter-spacing: 0.125em;
}

/* :is(input:not(textarea)) {
    line-height: 1;
    height: var(--input-hit-area);
} */

textarea {
  resize: vertical;
  /* form-sizing: content; */
  caret: bar;
  caret-color: var(--input-color-focus);
}

:is(button, input, textarea, select)[disabled],
:is(button, input, textarea, select):disabled {
  opacity: var(--disabled-opacity);
  color: var(--disabled-color);
  cursor: not-allowed;
}

input[readonly] {
  border-style: dotted;
  box-shadow: none;
  cursor: not-allowed;
  color: currentColor;
}

:is(:-webkit-autofill, :autofill) {
  /* Some UAs use !important on their autofill declarations */
  /* See https://mdn.io/autofill for details */
  color: rgb(var(--black), var(--alpha-3));
}

label {
  font-size: var(--font-size-2);
  min-width: calc(var(--hit-area-width) / 2.5);
}

fieldset,
output {
  border-color: transparent;
}

fieldset > *:not(*:last-child) {
  margin-bottom: var(--gap-1);
}

@supports (aspect-ratio: 1) {
  .ratio {
    width: 100%;
    &.auto {
      aspect-ratio: auto;
    }
    &.square {
      aspect-ratio: var(--ratio-square);
    }
    &.landscape {
      aspect-ratio: var(--ratio-landscape);
    }
    &.portrait {
      aspect-ratio: var(--ratio-portrait);
    }
    &.ultrawide {
      aspect-ratio: var(--ratio-ultrawide);
    }
  }
}

.group {
  isolation: isolate;

  &:focus-within {
    box-shadow: 0 0 0 4px var(--bg-idle);
  }

  & ::-webkit-input-placeholder {
    color: currentColor;
  }

  & ::-ms-input-placeholder {
    color: currentColor;
  }

  & ::placeholder-shown {
    color: currentColor;
  }

  & *::selection {
    color: currentColor;
  }

  @media (any-hover: hover) {
    &:where(:not(:active):hover) {
      /* hover effect */
      color: currentColor;
    }
  }
}

.row,
.column {
  display: flex;
}

.column {
  flex-direction: column;
}

.unit {
  display: flex;
  flex-wrap: wrap;
  /* place-content: center;
    place-items: center; */
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-grow {
  flex-grow: 1;
}

.reorder-top {
  order: -1 !important;
}

.margin-auto {
  &.top {
    margin-top: auto !important;
  }
  &.bottom {
    margin-bottom: auto !important;
  }
  &.left {
    margin-left: auto !important;
  }
  &.right {
    margin-right: auto !important;
  }
}

.grid {
  display: grid;

  &.equal-height {
    grid-auto-rows: 1fr;
  }
}

.grid-item-sticky {
  grid-area: 1 / auto/auto/-1;
  /* 
    grid-row: 1;
    grid-column-end: -1;
    */
}

.gap {
  gap: var(--gap-2);

  &.sm {
    gap: var(--gap-1);
  }
  &.md {
    gap: var(--gap-2);
  }
  &.lg {
    gap: var(--gap-3);
  }
  &.xl {
    gap: var(--gap-4);
  }
}

.padding-xy {
  padding: var(--gap-2);
  &.sm {
    padding: var(--gap-1);
  }
  &.md {
    padding: var(--gap-2);
  }
  &.lg {
    padding: var(--gap-3);
  }
}
.padding-x {
  &.sm {
    padding-left: var(--gap-1);
    padding-right: var(--gap-1);
  }
  &.md {
    padding-left: var(--gap-2);
    padding-right: var(--gap-2);
  }
  &.lg {
    padding-left: var(--gap-3);
    padding-right: var(--gap-3);
  }
}
.padding-y {
  &.sm {
    padding-top: var(--gap-1);
    padding-bottom: var(--gap-1);
  }
  &.md {
    padding-top: var(--gap-2);
    padding-bottom: var(--gap-2);
  }
  &.lg {
    padding-top: var(--gap-3);
    padding-bottom: var(--gap-3);
  }
}

.place-items {
  &.center {
    place-items: center;
  }
  &.start {
    place-items: start;
  }
  &.end {
    place-items: end;
  }
  &.baseline {
    place-items: baseline;
  }
}

.place-content {
  &.center {
    place-content: center;
  }
  &.start {
    place-content: start;
  }
  &.end {
    place-content: end;
  }
}

.art-direction {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: var(--gap-1);

  & .art-direction-item {
    display: grid;
    place-items: center;
    grid-column: span 4;

    &._12 {
      grid-column: span 12;
    }

    &._6 {
      grid-column: span 6;
    }
    &._4 {
      grid-column: span 4;
    }
    &._3 {
      grid-column: span 3;
    }
    &._2 {
      grid-column: span 2;
    }

    @media (orientation: portrait) {
      & {
        grid-column: span 6 !important;
      }
    }
  }
}

@media (min-width: 240px) and (max-width: 360px) {
  .art-direction-item {
    grid-column: span 12 !important;
  }
}

/*
    Intrinsic grid assign a min-width to
    children so that them can grow to 
    fill space but not shrink too much.
    Ends width-related media queries
*/

.intrinsic-flex {
  --min-content-width: 20rem;
  display: flex;
  flex-wrap: wrap;
}

.intrinsic-flex > * {
  flex: 1 1 var(--min-content-width);
}

/* sm by default */
.intrinsic-grid {
  --item-grid-xsm: 125px;
  --item-grid-sm: 250px;
  --item-grid-md: 440px;
  --item-grid-lg: 690px;
  --item-grid-xl: 860px;
  --grid-item-width: var(--item-grid-sm);
  align-items: start;
  display: grid;
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(100%, var(--grid-item-width)), 1fr)
  );

  width: 100%;

  &.equal {
    grid-auto-rows: 1fr;
  }

  &.xsm {
    --grid-item-width: var(--item-grid-xsm);
  }

  &.md {
    --grid-item-width: var(--item-grid-md);
  }

  &.lg {
    --grid-item-width: var(--item-grid-lg);
  }

  &.xl {
    --grid-item-width: var(--item-grid-xl);
  }
}

.overflow {
  --scrollbar-size: min(8px, 0.3em);
  scrollbar-gutter: stable;

  &.x {
    width: 100%;
    overflow-x: scroll;
    overscroll-behavior-x: contain;
    /* scroll-snap-type: x proximity; */
  }

  &.y {
    overflow-y: scroll;
    overscroll-behavior-y: contain;
    scroll-padding-bottom: var(--gap-3);
  }

  &.transparent {
    scrollbar-width: none;
  }

  &.none {
    overflow: hidden !important;
  }

  &::-webkit-scrollbar {
    width: var(--scrollbar-size);
    height: var(--scrollbar-size);
  }

  &::-webkit-scrollbar-track {
    background-color: var(--bg-active);
  }

  &::-webkit-scrollbar-corner {
    background-color: currentColor;
  }

  &::-webkit-scrollbar-thumb {
    background-color: var(--bg-idle);
    outline: 1px solid var(--transparent);
  }
}

@media (orientation: landscape) {
  .overflow-portrait {
    overflow: hidden !important;
  }
}

/* parent of table. usually with overflow-x */
*:has(> table) {
}

table {
  --min-cell-width: 8rem;
  --sticky-cell-width: 330px;
  width: 100%;
  /* create a more predictable table layout 
  that allows you to easily set 
  column widths by setting width on their 
  headings (<th>). */
  table-layout: fixed;
  /* 
  messes with sticky children :(  
  border-collapse: collapse; */
  border-spacing: 0;
}

thead {
  z-index: var(--z-max);
  position: relative;
}

th,
td {
  background-clip: padding-box;
  scroll-snap-align: start;
  /* border: var(--border-width) solid var(--transparent); */
  border: var(--border-width) solid currentColor;
  padding: var(--gap-3);
  min-width: var(--min-cell-width);
  text-align: left;
  margin: 0;
  border-top-width: 0;
  border-left-width: 0;
  &:last-child {
    border-right-width: 0;
  }
}

thead tr th:first-of-type,
tbody tr td:first-of-type {
  min-width: var(--sticky-cell-width);
}

thead th {
  z-index: var(--z-3);
  position: sticky;
  top: 0;
  border-top: 0;
  background-clip: padding-box;
  background-color: var(--bg-idle);
}

tbody {
  z-index: var(--z-2);
  position: relative;
  /* careful with next line */
  white-space: nowrap;
  & td {
    background-clip: padding-box;
    border-left: 0;
  }
  & tr:last-child th,
  & tr:last-child td {
    border-bottom: 0;
  }
  & > tr:nth-of-type(even) {
    background-color: rgb(var(--black), var(--alpha-1));
  }
}

thead tr th:first-of-type,
tbody tr td:first-of-type {
  position: sticky !important;
  background-color: var(--bg-active);
  left: 0;
}

thead tr th:first-of-type {
  z-index: var(--z-max);
}

tbody tr td:first-of-type {
  z-index: var(--z-1);
}

tr:last-child td {
  border-bottom-width: 0;
}

/* enhance ul */
ul.disc {
  list-style: circle;
  & li {
    margin-block: var(--gap-2);
    color: currentColor;
  }
  & li::marker {
    font-size: var(--font-size-3);
  }
  & li:has(:hover, :focus-within) {
    list-style: disc;
    color: currentColor;
  }
}

img {
  border: 0;
  border-style: none;
  max-width: 100%;
  height: auto;
  background-repeat: no-repeat;
  vertical-align: middle;
  shape-margin: 0.75rem;
}

[hidden] {
  display: none !important;
}

.dead {
  pointer-events: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/*
    Custom CSS properties can act as 'toggles':
    
    article {
    --hover: 0;
    }

    article:hover {
    --hover: 1;
    }
*/

@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }
  * {
    animation-delay: -1ms;
    animation-duration: 1ms;
    animation-iteration-count: 1;
    background-attachment: initial;
    scroll-behavior: auto;
    transition-delay: 0s;
    transition-duration: 0s;
  }
}

@media (forced-colors: active) {
  svg {
    forced-color-adjust: auto;
  }
}

@media screen and (-ms-high-contrast: active) {
  button {
    border: 2px solid currentcolor;
  }
}

/* 

@media (scripting: none) {
    } 
@media not (selector(: has(*))) {
  }
  
    */
